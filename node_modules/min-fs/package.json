{
  "name": "min-fs",
  "version": "0.2.0",
  "description": "A node.js implementation of the min-stream and continuable based fs interface for js-git.",
  "main": "fs.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/creationix/min-fs.git"
  },
  "keywords": [
    "min-stream",
    "continuable",
    "js-git",
    "fs",
    "interface"
  ],
  "author": {
    "name": "Tim Caswell",
    "email": "tim@creationix.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "fb3933591c65ded837f774ad9ab8edec5e9e511d",
  "bugs": {
    "url": "https://github.com/creationix/min-fs/issues"
  },
  "readme": "min-fs\n======\n\nA node.js implementation of the min-stream and continuable based fs interface for js-git.\n\n## File System Interface\n\nThis module implements the following functions from the fs interface which is described in detail at <https://github.com/creationix/js-git/blob/master/specs/fs.md>\n\n- stat(path) -> continuable<stat>\n- read(path, [encoding]) -> continuable<value>\n- write(path, value, [encoding]) -> continuable\n- readStream(path, [options]) -> source<binary>\n- writeStream(path, [options]) -> sink<binary>\n- unlink(path) -> continuable\n- readlink(path) -> continuable<target>\n- symlink(path, target) -> continuable\n- readdir(path) -> source<name>\n- rmdir(path) -> continuable\n- mkdir(path) -> continuable\n- rename(path, target) -> continuable\n\n```js\nvar fs = require('min-fs');\n\n// Streaming copy a file\n\n// Set up a source, the file isn't actually opened till the stream is read from.\nvar source = fs.readStream(\"input.txt\");\n\n// Set up a sink.  The file isn't actually opened yet.\nvar sink = fs.writeStream(\"copy.txt\");\n\n// Hook the source to the sink, but still don't create either file or start moving yet.\nvar continuable = sink(source);\n\n// Now, create both files and stream the contents.  If there is a problem it will be reported here.\n// Otherwise the continuable will resolve with no error when done streaming.\ncontinuable(function (err) {\n  if (err) throw err;\n  console.log(\"Done Streaming\");\n});\n```\n\nYou don't have to store all the steps into variables, so you can simply chain the calls.\n\nAlso if you're in an ES6 generator using [gen-run](https://github.com/creationix/gen-run), then consuming the continuable is even easier.\n\n```js\nvar run = require('gen-run');\nvar fs = require('min-fs');\n\nfunction* copy(source, dest) {\n  yield fs.writeStream(dest)(fs.readStream(source));\n}\n\nrun(function* () {\n  yield* copy(\"input.txt\", \"copy.txt\");\n});\n```\n\n\n## chroot(root) -> fs\n\nIn addition to the exports object implementing the fs interface with respect to the filesystem root, you can also create a fs instance that is chrooted to some directory.\n\n```js\nvar fs = require('min-fs')(\"/home/tim/Code/js-git/.git\");\n\n// read the first chunk in the staging area's index.\nfs.readStream(\"/index\")(null, console.log);\n```\n",
  "_id": "min-fs@0.2.0",
  "dist": {
    "shasum": "712c1faa75a0ccf1255df44d29e181c98f2041a8"
  },
  "_from": "min-fs@",
  "_resolved": "https://registry.npmjs.org/min-fs/-/min-fs-0.2.0.tgz"
}
